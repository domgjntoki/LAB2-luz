
sismicro_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b5  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  00001169  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  88:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setINT0>:



// configura a Interrupção Externa (INT0)
void setINT0(){
	EICRA = 0b00000010; // interrupção externa INT0 na borada de descida
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000001; // habilita interrupção externa INT0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	8d bb       	out	0x1d, r24	; 29
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <uart_initialization>:
}

void uart_initialization(uint32_t baud){
	uint8_t speed = 16;
	
	baud = (F_CPU/(speed * baud)) - 1;
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	9c 01       	movw	r18, r24
  b4:	ad 01       	movw	r20, r26
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	74 e2       	ldi	r23, 0x24	; 36
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 cd 00 	call	0x19a	; 0x19a <__udivmodsi4>
  d2:	ba 01       	movw	r22, r20
  d4:	a9 01       	movw	r20, r18
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	51 09       	sbc	r21, r1
  da:	61 09       	sbc	r22, r1
  dc:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud) >> 8;
  de:	bb 27       	eor	r27, r27
  e0:	a7 2f       	mov	r26, r23
  e2:	96 2f       	mov	r25, r22
  e4:	85 2f       	mov	r24, r21
  e6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = baud;
  ea:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0A = 0;
  ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1 << TXEN0);
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <uart_send_byte>:
uint8_t systemUp = 0;
uint8_t buttonStillPressed = 0;
uint8_t estado_botao = 0;

void uart_send_byte(uint8_t data){
	while(!( UCSR0A & (1<<UDRE0)));
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <uart_send_byte>
	UDR0 = data;	
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <systemOn>:
}

void systemOn(){
	estado_botao ^= PIND2;
 114:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	89 27       	eor	r24, r25
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	if (estado_botao){
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <systemOn+0x18>
		PORTB |= (1<<5);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	80 62       	ori	r24, 0x20	; 32
 128:	85 b9       	out	0x05, r24	; 5
 12a:	08 95       	ret
	}else{
		PORTB &= ~(1<<5);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <main>:
uint8_t data;


int main(void)
{
	setINT0();
 134:	0e 94 48 00 	call	0x90	; 0x90 <setINT0>
	uart_initialization(9600);
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	75 e2       	ldi	r23, 0x25	; 37
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_initialization>
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x10>

00000146 <__vector_1>:
		
    }
	
}

ISR(INT0_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	systemOn();
 168:	0e 94 8a 00 	call	0x114	; 0x114 <systemOn>
	data = estado_botao;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
	uart_send_byte(data);
 174:	0e 94 83 00 	call	0x106	; 0x106 <uart_send_byte>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__udivmodsi4>:
 19a:	a1 e2       	ldi	r26, 0x21	; 33
 19c:	1a 2e       	mov	r1, r26
 19e:	aa 1b       	sub	r26, r26
 1a0:	bb 1b       	sub	r27, r27
 1a2:	fd 01       	movw	r30, r26
 1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <__udivmodsi4_ep>

000001a6 <__udivmodsi4_loop>:
 1a6:	aa 1f       	adc	r26, r26
 1a8:	bb 1f       	adc	r27, r27
 1aa:	ee 1f       	adc	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	a2 17       	cp	r26, r18
 1b0:	b3 07       	cpc	r27, r19
 1b2:	e4 07       	cpc	r30, r20
 1b4:	f5 07       	cpc	r31, r21
 1b6:	20 f0       	brcs	.+8      	; 0x1c0 <__udivmodsi4_ep>
 1b8:	a2 1b       	sub	r26, r18
 1ba:	b3 0b       	sbc	r27, r19
 1bc:	e4 0b       	sbc	r30, r20
 1be:	f5 0b       	sbc	r31, r21

000001c0 <__udivmodsi4_ep>:
 1c0:	66 1f       	adc	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	88 1f       	adc	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	1a 94       	dec	r1
 1ca:	69 f7       	brne	.-38     	; 0x1a6 <__udivmodsi4_loop>
 1cc:	60 95       	com	r22
 1ce:	70 95       	com	r23
 1d0:	80 95       	com	r24
 1d2:	90 95       	com	r25
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	bd 01       	movw	r22, r26
 1da:	cf 01       	movw	r24, r30
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
